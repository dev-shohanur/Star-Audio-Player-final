<script id="html5-player-plyr-js" src="{{ 'plyr-3.7.8.js' | asset_url }}" defer></script>
<link id="html5-player-plyr-css" rel="stylesheet" type="text/css" href="{{ 'plyr-3.7.8.css' | asset_url }}">
<link id="html5-player-plyr-css" rel="stylesheet" type="text/css" href="{{ 'style.css' | asset_url }}">
<script>
const audioPlyrElements = document.querySelectorAll('.html5-audio-plyr');

  function htmlToElement(html) {
    const temp = document.createElement('template');
    temp.innerHTML = html.trim();
    return temp.content.firstChild;
  }

  if (audioPlyrElements.length >= 1) {
    const ids = Array.from(audioPlyrElements)
      .map((item) => item.getAttribute('data-id'))
      .filter((id) => id);

    fetch('https://sunset-fire-helen-hotel.trycloudflare.com/app/api/plyr-data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify(ids),
    })
      .then((res) => res.json())
      .then((datas) => {

        

        let uniqueNumbers = datas.audio.filter(
          (value, index, self) => index === self.findIndex((obj) => obj.id === value.id)
        );


        uniqueNumbers.forEach((data, index) => {
          function generateUniqueId() {
            return 'id-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
          }

          const generateId = generateUniqueId();

          const id = data.id;
          const audioElement = document.querySelectorAll(`.html5-audio-plyr[data-id="${id}"]`);

          if (!audioElement) return;

          const modalElementString = `
          <div class="player-${id}">
            <audio id="player-${id}-${index}" class="player" controls>
              <source src="${data.url}" type="audio/mp3" />
            </audio>
          </div>`;

          

          const controlsConfig = {
            controls: ['play', 'progress', 'current-time', 'mute', 'volume', 'settings'],
          };


          audioElement.forEach((audio,i)=>{


            const styles = `
          <style>
            .player-${id} {
              --plyr-control-icon-size: ${data[data?.selectedScreen]?.iconSize || '16px'};
              --plyr-audio-controls-background: ${data[data?.selectedScreen]?.background || '#f4f4f4'};
              --plyr-menu-border-color: ${data[data?.selectedScreen]?.borderColor || '#ccc'};
              margin:  ${data[data?.selectedScreen]?.margin};
              padding:  ${data[data?.selectedScreen]?.padding};
            }
            .player-${id} .plyr--audio .plyr__controls {
              border-radius: ${data[data?.selectedScreen]?.borderRadius || '4px'};
            }
            .player-${id} .plyr.plyr--full-ui.plyr--audio {
              width: ${data[data?.selectedScreen]?.width || '100%'};
              height: ${data[data?.selectedScreen]?.height || 'auto'};
            }
            .player-${id} .plyr .media-controls {
                background:${data[data?.selectedScreen]?.background};
                border-radius: ${data[data?.selectedScreen]?.borderRadius};
                width:${data[data?.selectedScreen]?.width};
                height:${data[data?.selectedScreen]?.height};
                border:${data[data?.selectedScreen]?.borderWidth + " " + data[data?.selectedScreen]?.borderStyle + " " + data[data?.selectedScreen]?.borderColor}
              }
              .player-${id} .demo-1 .container {
                background:${data[data?.selectedScreen]?.background};
                border-radius: ${data[data?.selectedScreen]?.borderRadius};
                width:${data[data?.selectedScreen]?.width};
                height:${data[data?.selectedScreen]?.height};
                border:${data[data?.selectedScreen]?.borderWidth + " " + data[data?.selectedScreen]?.borderStyle + " " + data[data?.selectedScreen]?.borderColor};
            }
              .player-${id} .demo-1 .container .controls{
                background:${data[data?.selectedScreen]?.background};
            }

           .player-${id}  .plyr .media-controls {
                border:${data[data?.selectedScreen]?.borderWidth + " " + data[data?.selectedScreen]?.borderStyle + " " + data[data?.selectedScreen]?.borderColor};
                }

               .player-${id} .plyr .media-controls svg,
              .player-${id} .plyr .controls svg {
                width: ${parseInt(data[data?.selectedScreen]?.iconSize) + 10 + data[data?.selectedScreen]?.iconSize?.match(/[a-z%]+/i)[0]};
                height: ${parseInt(data[data?.selectedScreen]?.iconSize) + 10 + data[data?.selectedScreen]?.iconSize?.match(/[a-z%]+/i)[0]};
                color: ${data[data?.selectedScreen]?.iconColor};
                }
                .player-${id} .demo-1 button.play.plyr__control--pressed .pause-icon{
                  color: ${data[data?.selectedScreen]?.iconColor} !important;
                }

                .player-${id} .plyr {
                --plyr-color-main:${data?.mainColor};
              }
            
            
              .player-${id} .plyr .media-controls svg {
                width: ${parseInt(data?.[data?.selectedScreen]?.iconSize) + 10 + data?.[data?.selectedScreen]?.iconSize?.match(/[a-z%]+/i)[0]};
                height: ${parseInt(data?.[data?.selectedScreen]?.iconSize) + 10 + data?.[data?.selectedScreen]?.iconSize?.match(/[a-z%]+/i)[0]};
              }
              ${data?.selectedScreen === "screenTwo" &&
              `.player-${id} .demo-1 .container .image-box {
                background-image: url("${ data?.screenTwo?.backgroundImage }")
              }` }
          </style>`;

            let controls;


              if (data?.selectedScreen === "screenOne") {
    controls = {
      controls: `
          <div class="media-controls plyr__controls">
            <div class="media-buttons">
              <button class="back-button media-button" label="back">
                <span class="back-button__icon">
                  <svg
                    stroke="currentColor"
                    fill="currentColor"
                    strokeWidth={0}
                    viewBox="0 0 448 512"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path d="M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z" />
                  </svg>
                </span>
                <span class="button-text milli">Back</span>
              </button>

              <button
                class="fast-forward-button media-button"
                label="fast forward"
                data-plyr="rewind"
              >
                <span class="back-button__icon">
                  <svg
                    stroke="currentColor"
                    fill="currentColor"
                    strokeWidth={0}
                    viewBox="0 0 1024 1024"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path d="M825.8 498L538.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L825.8 526c8.3-7.2 8.3-20.8 0-28zm-320 0L218.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L505.8 526c4.1-3.6 6.2-8.8 6.2-14 0-5.2-2.1-10.4-6.2-14z" />
                  </svg>
                </span>
                <span class="button-text milli">Backward</span>
              </button>

             <button class="play-button media-button" label="play" aria-label="Play, {title}"
                data-plyr="play">
          <span class="back-button__icon play-button__icon">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" class="pause icon w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5" />
              </svg>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" class="play icon w-6 h-6" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z" />
            </svg>
 
          </span>
                 
          <span class="button-text milli">Play</span>
        </button>

              <button
                class="fast-forward-button media-button"
                label="fast forward"
                data-plyr="fast-forward"
              >
                <span class="back-button__icon">
                  <svg
                    stroke="currentColor"
                    fill="currentColor"
                    strokeWidth={0}
                    viewBox="0 0 1024 1024"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path d="M825.8 498L538.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L825.8 526c8.3-7.2 8.3-20.8 0-28zm-320 0L218.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L505.8 526c4.1-3.6 6.2-8.8 6.2-14 0-5.2-2.1-10.4-6.2-14z" />
                  </svg>
                </span>
                <span class="button-text milli">Forward</span>
              </button>

              <button class="skip-button media-button" label="skip">
                <span class="back-button__icon">
                  <svg
                    stroke="currentColor"
                    fill="currentColor"
                    strokeWidth={0}
                    viewBox="0 0 1024 1024"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path d="M676.4 528.95L293.2 829.97c-14.25 11.2-35.2 1.1-35.2-16.95V210.97c0-18.05 20.95-28.14 35.2-16.94l383.2 301.02a21.53 21.53 0 0 1 0 33.9M694 864h64a8 8 0 0 0 8-8V168a8 8 0 0 0-8-8h-64a8 8 0 0 0-8 8v688a8 8 0 0 0 8 8" />
                  </svg>
                </span>
                <span class="button-text milli">Skip</span>
              </button>
            </div>
            <div class="media-progress">
            <div class="progress-bar-wrapper progress">
            <input data-plyr="seek"  type="range" min="0" max="100" step="0.01" value="0" aria-label="Seek" />
            
     
              </div>
             
              <div class="progress-time-current milli plyr__time plyr__time--current" aria-label="Current time">15:23</div>
              <div class="progress-time-total milli plyr__time plyr__time--duration" aria-label="Duration">34:40</div>
            </div>
          </div>
          `,
    };
  } else if (data?.selectedScreen == "screenTwo") {
    controls = {
      controls: `<div class="demo-1">
      <div class="container">
        <div class="image-box">
          <div class="content">
            <div class="cover">
              <img src="${data?.screenTwo?.image || "https://files.bplugins.com/wp-content/uploads/2024/04/429550502_25614821214771859_729153743743869927_n-1.jpg"}" alt="${data?.title}" srcSet="" />
            </div>
            <div>
              <h2 class="title">${data?.title}</h2>
              <div class="total-time">
                <span class="icon"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" class="w-6 h-6">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg></span>
                <span>Total Time :</span>
                <span class="progress-time-current plyr__time plyr__time--current" aria-label="Current time">03:03</span>
              </div>
            </div>
          </div>
          </div>
          <div class="progressbar">
            <input data-plyr="seek"  type="range" min="0" max="100" step="0.01" value="0" aria-label="Seek" />
          </div>
        <div class="controls">
          <button class="backward" data-plyr="rewind">
            <svg stroke="currentColor" fill="currentColor" strokeWidth={0} viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg">
              <path d="M485.6 249.9L198.2 498c-8.3 7.1-8.3 20.8 0 27.9l287.4 248.2c10.7 9.2 26.4.9 26.4-14V263.8c0-14.8-15.7-23.2-26.4-13.9zm320 0L518.2 498a18.6 18.6 0 0 0-6.2 14c0 5.2 2.1 10.4 6.2 14l287.4 248.2c10.7 9.2 26.4.9 26.4-14V263.8c0-14.8-15.7-23.2-26.4-13.9z" />
            </svg>
          </button>
          <button class="play" aria-label="Play, {title}"
                data-plyr="play">
            <svg stroke="currentColor" class="play-icon" fill="currentColor" strokeWidth={0} viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
              <path d="M11.596 8.697l-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 010 1.393z" />
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" class="pause-icon" viewBox="0 0 320 512">{ /*!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.*/ }<path d="M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z" /></svg>
          </button>
          <button class="forward"  data-plyr="fast-forward">
            <svg stroke="currentColor" fill="currentColor" strokeWidth={0} viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg">
              <path d="M825.8 498L538.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L825.8 526c8.3-7.2 8.3-20.8 0-28zm-320 0L218.4 249.9c-10.7-9.2-26.4-.9-26.4 14v496.3c0 14.9 15.7 23.2 26.4 14L505.8 526c4.1-3.6 6.2-8.8 6.2-14 0-5.2-2.1-10.4-6.2-14z" />
            </svg>
          </button>
        </div>
      </div>
    </div>`,
    };
  } else if (data?.selectedScreen == "screenDefault") {
    controls = {
      controls: [
        data?.screenDefault?.controls
?.play && "play",
        data?.screenDefault?.controls
?.progress && "progress",
        data?.screenDefault?.controls
?.currentTime && "current-time",
        data?.screenDefault?.controls
?.mute && "mute",
        data?.screenDefault?.controls
?.volume && "volume",
        data?.screenDefault?.controls
?.settings && "settings",
      ],
    };
  } 
             const modalElementString = `
          <div class="player-${id}">
            <audio id="player-${id}-${i}" class="player" controls>
              <source src="${data.url}" type="audio/mp3" />
            </audio>
          </div>`;
                audio.appendChild(htmlToElement(styles));
                audio.appendChild(htmlToElement(modalElementString));
                const player = new Plyr(`#player-${id}-${i}`, controls);
          });

          {% comment %} audioElement[index]?.appendChild(htmlToElement(modalElementString));
          audioElement[index]?.appendChild(htmlToElement(styles)); {% endcomment %}

        });
      })
      .catch((error) => console.error('Error fetching player data:', error));
  }
</script>

{% schema %}
{
  "name": "HTML5 Audio Player",
  "target": "body"
}
{% endschema %}
